openapi: "3.0.3"
info:
  title: "ChessTasks.com API"
  description: "ChessTasks.com - API documentation."
  version: "0.0.1"
servers:
- url: "https://chesstasks.com/api"
paths:
  /api/auth:
    post:
      operationId: /api/auth
      tags:
        - auth
      description: "Generate access token for yourself"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AuthPayload"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: string
                description: Generated token.
        "400":
          description: Bad Request - Bad credentials
  /api/auth/current:
    get:
      operationId: /api/auth/current
      tags:
        - auth
      description: "Get current user."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request - no current user
  /api/auth/revoke:
    post:
      operationId: /api/auth/revoke
      tags:
        - auth
      description: "Revoke access token."
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden - You're not authenticated.
  /api/friend/all:
    get:
      operationId: /api/friend/all
      tags:
        - friends
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Friend"
        "403":
          description: Forbidden - You're not authenticated
  /api/friend/by-id/{id}:
    delete:
      operationId: /api/friend/by-id/{id}
      tags:
        - friends
      description: "Delete a friend by id"
      parameters:
      - name: "id"
        description: Friend.id [not user id]
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "201":
          description: Deleted successfully.
        "403":
          description: Forbidden - You're not authenticated
        "400":
          description: "Bad Request - Friend not found"
  /api/friend/requests:
    put:
      operationId: /api/friend/requests
      tags:
        - friends
      description: "Send a friend request to user"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PutFriendRequestPayload"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendRequest"
  /api/friend/requests/received:
    get:
      operationId: /friend/requests/received
      tags:
        - friends
      description: List friend request you received
      parameters:
        - name: skip
          in: query
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendRequest"
        "403":
          description: Forbidden - You're not authenticated
  /api/friend/requests/sent:
    get:
      operationId: /friend/requests/sent
      tags:
        - friends
      description: List friend request you sent
      parameters:
        - name: skip
          in: query
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendRequest"
        "403":
          description: Forbidden - You're not authenticated

  /api/play/training/{puzzleId}/submit:
    post:
      operationId: /play/training/{puzzleId}/submit
      tags:
        - play
      description: Submit puzzle if user didn't submit this puzzle before. If user has submitted, will be returned $.applied=false and PuzzleHistory and ranking will not be affected in database.
      parameters:
      - name: "puzzleId"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/SubmitPuzzlePayload"
        required: true
      responses:
        "403":
          description: Forbidden - You're not authenticated
        "400":
          description: "Bad Request"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SubmitPuzzleResponse"
  /api/play/training/puzzles:
    post:
      operationId: /play/training/puzzles
      tags:
        - play
      description: Get Puzzles by criteria
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GetPuzzlePayload"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
        "403":
          description: Forbidden - You're not authenticated
  /api/play/training/ranking/{userId}:
    post:
      operationId: /play/training/ranking/{userId}
      tags:
        - play
      description: Get user ranking, if it's user allows using statistics visibility.
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrainingRanking"
        "400":
          description: Bad request - you're not allowed to see ranking of this user, or user does not exist.
        "403":
          description: Forbidden - You're not authenticated
  /api/puzzle/{id}:
    delete:
      operationId: /puzzle/{id} DEL
      tags:
        - puzzle
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request - Puzzle not found"
        "204":
          description: "OK"
    get:
      operationId: /puzzle/{id}
      tags:
        - puzzle
      description: Get puzzle by id
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request - Puzzle not found"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Puzzle"
  /api/puzzle/all/by-database/lichess:
    get:
      operationId: /puzzle/all/by-database/lichess
      tags:
        - puzzle
      description: Get list of puzzle in Lichess database.
      parameters:
      - name: "skip"
        in: "query"
        required: false
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
        "403":
          description: Forbidden - You're not authenticated.
  /api/puzzle/all/by-database/user:
    get:
      operationId: /puzzle/all/by-database/user
      tags:
        - puzzle
      description: Get list of puzzle in User database.
      parameters:
        - name: "skip"
          in: "query"
          required: false
          schema:
            type: "number"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
        "403":
          description: Forbidden - You're not authenticated.
  /api/puzzle/by-opening/eco/{openingEco}:
    get:
      operationId: /puzzle/by-opening/eco/{openingEco}
      tags:
        - puzzle
      description: ""
      parameters:
      - name: "openingEco"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
  /api/puzzle/by-opening/id/{openingId}:
    get:
      operationId: /puzzle/by-opening/id/{openingId}
      tags:
        - puzzle
      description: ""
      parameters:
      - name: "openingId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
        "403":
          description: Forbidden - You're not authenticated.
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
  /api/puzzle/by-theme/{themeName}:
    get:
      operationId: /puzzle/by-theme/{themeName}
      tags:
        - puzzle
      description: ""
      parameters:
      - name: "themeName"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
  /api/puzzle/by-user/{userId}:
    get:
      operationId: /puzzle/by-user/{userId}
      tags:
        - puzzle
      description: ""
      parameters:
      - name: "skip"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "403":
          description: Forbidden - You're not authenticated
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"

  /api/user/search/by-username:
    get:
      operationId: /user/search/by-username
      tags:
        - user
      parameters:
        - name: "query"
          in: "query"
          required: true
          schema:
            type: string
        - name: "skip"
          in: "query"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SimpleUser"
        "403":
          description: Forbidden - You're not authenticated.


  /api/theme/all:
    get:
      operationId: /theme/all
      tags:
        - theme
      description: Get all existing themes.
      responses:
        "403":
          description: Forbidden - You're not authenticated
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Theme"


  /api/puzzle-history/mine:
    get:
      description: Get puzzle history of current authenticated user.
      operationId: /puzzle-history/mine
      tags:
        - puzzleHistory
      responses:
        '403':
          description: Forbidden - You're not authenticated.
        '400':
          description: Something wrong...
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PuzzleHistoryItems"

  /api/register:
    post:
      description: Register new user [as this user]
      operationId: /register
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  description: Email Address
                username:
                  type: string
                  description: Username
                password:
                  type: string
      tags:
        - register
      responses:
        '204':
          description: No Content - check your email for verification code.
        '400':
          description: Bad Request - something wrong...

  /api/register/confirm:
    post:
      description: Confirms new user with verification code.
      operationId: /register/confirm
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                  description: Email Address
                code:
                  type: string
                  description: Verification code sent to email address
      tags:
        - register
      responses:
        '204':
          description: No Content - registered, you can login now.
        '400':
          description: Bad Request - something wrong...

  /api/puzzle-history/user/{userId}:
    get:
      description: Get PuzzleHistory of another user
      operationId: /puzzle-history/user/{userId}
      tags:
        - puzzleHistory
      parameters:
        - name: userId
          in: "path"
          required: true
      responses:
        '403':
          description: Forbidden - You're not authenticated.
        '400':
          description: Bad Request - Probably you have no access to puzzle history of this user.
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PuzzleHistoryItems"
  /api/friend/request/by-sender-id/{senderId}/accept:
    post:
      description: Accept Friend Request by sender id.
      operationId: /friend/request/by-sender-id/{senderId}/accept
      tags:
        - friends
      parameters:
        - name: senderId
          in: "path"
          required: true
      responses:
        '200':
          description: Ok - Request accepted and the Friendship is created.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Friend"
        '403':
          description: Forbidden - You're not authenticated.
        '400':
          description: Bad Request - Couldn't accept this friend request.

  /api/friend/request/by-sender-id/{senderId}/reject:
    post:
      description: Reject Friend Request by sender id.
      operationId: /friend/request/by-sender-id/{senderId}/reject
      tags:
        - friends
      parameters:
        - name: senderId
          in: "path"
          required: true
      responses:
        '204':
          description: Ok [No Content] - Request is rejected.
        '403':
          description: Forbidden - You're not authenticated.
        '400':
          description: Bad Request - Couldn't reject this friend request.

  /api/user/preferences/history-visibility/:
    get:
      description: Get History Visibility value [from User Preferences]
      tags:
        - userPreferences
      operationId: /user/preferences/history-visibility/
      responses:
        '400':
          description: Bad Request - Something went wrong...
        '403':
          description: Forbidden - You're not authenticated.
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserPuzzleHistoryVisibility"

  /api/user/preferences/history-visibility/{value}:
    post:
      description: Set History Visibility value [from User Preferences]
      tags:
        - userPreferences
      operationId: /user/preferences/history-visibility/{value}
      parameters:
        - name: value
          required: true
          schema:
            $ref: "#/components/schemas/UserPuzzleHistoryVisibility"
          description: Value to set
          in: "path"
      responses:
        '400':
          description: Bad Request - Something went wrong...
        '403':
          description: Forbidden - You're not authenticated.
        '204':
          description: OK [No Content] - value set

  /api/user/preferences/statistics-visibility/:
    get:
      description: Get Statistics Visibility value [from User Preferences]
      tags:
        - userPreferences
      operationId: /user/preferences/statistics-visibility/
      responses:
        '400':
          description: Bad Request - Something went wrong...
        '403':
          description: Forbidden - You're not authenticated.
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserStatisticsVisibility"

  /api/user/preferences/statistics-visibility/{value}:
    post:
      description: Set Statistics Visibility value [from User Preferences]
      tags:
        - userPreferences
      operationId: /user/preferences/statistics-visibility/{value}
      parameters:
        - name: value
          required: true
          schema:
            $ref: "#/components/schemas/UserStatisticsVisibility"
          description: Value to set
          in: "path"
      responses:
        '400':
          description: Bad Request - Something went wrong...
        '403':
          description: Forbidden - You're not authenticated.
        '204':
          description: OK [No Content] - value set
  /api/statistics/simple/user/{userId}:
    get:
      description: Get simple statistics for user
      operationId: /statistics/simple/user/{userId}
      parameters:
        - name: userId
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SimpleUserStatistics"
        '403':
          description: Forbidden - You're not authenticated
        '400':
          description: Bad Request - Probably you have no access to see statistics of this user.

  /api/friend/all/include-user:
    get:
      description: Get friend list including user names
      tags:
        - friends
      parameters:
        - name: skip
          in: 'query'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/FriendIncludeUserNames"
        '403':
          description: Forbidden - no valid authentication.


  /api/friend/requests/sent/include-user:
    get:
      description: Get sent friend requests including user names
      tags:
        - friends
      parameters:
        - name: skip
          in: 'query'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/FriendRequestIncludeUserNames"
        '403':
          description: Forbidden - no valid authentication.

  /api/friend/requests/received/include-user:
    get:
      description: Get received friend requests including user names
      tags:
        - friends
      parameters:
        - name: skip
          in: 'query'
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/FriendRequestIncludeUserNames"
        '403':
          description: Forbidden - no valid authentication.


  /api/user/by-id/{id}:
    get:
      tags:
        - user
      description: Get user profile by user ID
      parameters:
        - name: id
          schema:
            type: integer
          in: path
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PublicUser"
        '403':
          description: Forbidden - No valid authentication
        '400':
          description: Bad Request - Probably user you're looking for does not exist
  /api/play/training/puzzles/search:
    post:
      tags:
        - play
      description: Search puzzles to play using advanced search criteria
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GetPuzzleSearchPayload"
      responses:
        '200':
          description: Success - Puzzle matching to given criteria returned.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Puzzle"
        '403':
          description: Forbidden - You're not authenticated.
components:
  schemas:
    SimpleUserStatistics:
      type: object
      properties:
        totalSolved:
          type: integer
        totalFails:
          type: integer
    UserStatisticsVisibility:
      type: string
      required: true
      enum: [ME, ONLY_FRIENDS, EVERYONE]
    UserPuzzleHistoryVisibility:
      type: string
      required: true
      enum: [ME, ONLY_FRIENDS, EVERYONE]
    PuzzleHistoryItems:
      type: array
      items:
        $ref: "#/components/schemas/PuzzleHistoryItem"
    PuzzleHistoryItem:
      type: object
      properties:
        moves:
          type: "string"
          description: Moves made by user.
        success:
          type: "boolean"
        userId:
          type: "integer"
        puzzleId:
          type: "integer"
    AuthPayload:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
    ExceptionResponse:
      type: "object"
      properties:
        message:
          type: "string"
    SimpleUser:
      type: "object"
      properties:
        username:
          type: string
        id:
          type: integer
        createdAt:
          type: integer
    User:
      type: "object"
      properties:
        username:
          type: "string"
        emailAddress:
          type: "string"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "integer"
          format: "int64"
    PutFriendRequestPayload:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
    SubmitPuzzlePayload:
      type: "object"
      properties:
        success:
          type: "boolean"
        moves:
          type: "string"
    PuzzleDatabase:
      type: string
      enum:
        - LICHESS
        - USER
    GetPuzzlePayload:
      type: "object"
      properties:
        rankingOffset:
          type: integer
          nullable: true
        themeId:
          type: integer
          nullable: true
        database:
          $ref: "#/components/schemas/PuzzleDatabase"
    Object:
      type: "object"
      properties: {}
    Friend:
      type: "object"
      properties:
        id:
          type: integer
        userId:
          type: integer
          description: "First user id"
        secondUserId:
          type: integer
          description: "Second user id"
        createdAt:
          type: integer
          description: Request accepted at
    FriendRequest:
      type: "object"
      properties:
        id:
          type: integer
        createdAt:
          type: integer
          description: Sent at
        senderId:
          type: integer
          description: Id of user who sent the request.
        targetId:
          type: integer
          description: Id of user who received the request.
    PublicUser:
      type: "object"
      properties:
        id:
          type: integer
          description: User ID
        username:
          type: string
          description: Username

    FriendIncludeUserNames:
      type: "object"
      properties:
        id:
          type: integer
        userId:
          type: integer
          description: "First user id"
        userName:
          type: string
          description: Username [Users.username] of user referenced by 'userId' key.
        secondUserName:
          type: string
          description: Username [Users.username] of user referenced by 'secondUserId'.
        secondUserId:
          type: integer
          description: "Second user id"
        createdAt:
          type: integer
          description: Request accepted at

    FriendRequestIncludeUserNames:
      type: "object"
      properties:
        id:
          type: integer
        createdAt:
          type: integer
          description: Sent at
        senderId:
          type: integer
          description: Id of user who sent the request.
        targetId:
          type: integer
          description: Id of user who received the request.
        senderUserName:
          type: string
          description: Username [Users.username] of user who sent the request.
        targetUserName:
          type: string
          description: Username [Users.username] of user who received the request/


    SubmitPuzzleResponse:
      type: object
      properties:
        applied:
          type: boolean
          description: Indicates that solution is submitted. Server will not accept second answer [if user already submitted this puzzle]
        ranking:
          type: integer
          nullable: true
          description: New ranking, can be null if applied is false.
        rankingDifference:
          type: integer
          nullable: true
          description: Difference between old ranking and new ranking. Positive number when new ranking is greater than old. Nullable when applied is false.
    Puzzle:
      type: object
      properties:
        id:
          type: integer
        fen:
          type: string
        moves:
          type: array
          items:
            type: string
        database:
          $ref: "#/components/schemas/PuzzleDatabase"
        themes:
          type: array
          items:
            type: string
        ranking:
          type: integer
        ownerId:
          type: integer
          nullable: true
        openingId:
          type: integer
          nullable: true
        createdAt:
          type: integer
    Theme:
      type: object
      properties:
        id:
          type: integer
          description: Theme's ID
        name:
          type: string
          description: Theme's NAME
    TrainingRanking:
      type: object
      properties:
        userId:
          type: integer
          description: User ID
        ranking:
          type: integer
          description: User ranking
    GetPuzzleSearchPayload:
      type: object
      properties:
        ranking:
          type: object
          properties:
            from:
              type: integer
            to:
              type: integer
        themeIds:
          type: array
          description: All themes must be find.
          items:
            description: Theme ID
            type: integer